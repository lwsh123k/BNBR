const { ethers } = require("ethers");
const provider = new ethers.providers.JsonRpcProvider("https://binance.nodereal.io");
// 换成你的账号和私钥
const account = "xxx";
const privateKey = "xxx";
const wallet = new ethers.Wallet(privateKey, provider);

// 获取当前主网 gas 价格
async function getGasPrice() {
    const gasPrice = await provider.getGasPrice();
    return gasPrice;
}

// 获取链上实时 gasLimit
async function getGasLimit(address, data) {
    const gasLimit = await provider.estimateGas({
        to: address,
        value: ethers.utils.parseEther("0.0001"),
    });

    return gasLimit.toNumber();
}

async function mine_rETH(nonce) {
    let toAddress = "0xB6Dc01b0731FC4A9389DAdAcDB7Ff7eE1A5772Ec";
    // 数据上链
    const currentGasPrice = await getGasPrice();
    const gasMultiple = parseInt(String(1.05 * 100));
    const increasedGasPrice = currentGasPrice.div(100).mul(gasMultiple);
    let gasLimit = await getGasLimit(toAddress);

    const tx = {
        from: account,
        to: toAddress,
        nonce: nonce,
        value: ethers.utils.parseEther("0.0001"),
        gasPrice: increasedGasPrice,
        gasLimit: 252895,
    };

    const signedTx = await wallet.signTransaction(tx);
    const txResponse = await provider.sendTransaction(signedTx);
}

let nonce;
(async () => {
    try {
        nonce = await provider.getTransactionCount(account);
        for (let i = 0; i < 10; i++) {
            mine_rETH(nonce + i);
        }
    } catch (error) {
        console.error("An error occurred:", error);
    }
})();
